<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Hugo website</title>
    <link>https://iadecker.github.io/post/</link>
    <description>Recent content in Posts on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://iadecker.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What Defines a Kevin Willard Team?</title>
      <link>https://iadecker.github.io/2022/11/15/what-defines-a-kevin-willard-team/</link>
      <pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/11/15/what-defines-a-kevin-willard-team/</guid>
      <description>#Loading our libraries library(tidyverse) library(ggbeeswarm) library(ggrepel) #Loading our random number generator set.seed(1234) #Reading in the game logs data logs &amp;lt;- read_csv(&amp;quot;https://dwillis.github.io/sports-data-files/logs1222.csv&amp;quot;) #Filtering for MD and creating win/loss columns maryland &amp;lt;- logs %&amp;gt;% filter(TeamFull == &amp;#39;Maryland Terrapins&amp;#39;) %&amp;gt;% mutate(outcome = case_when( grepl(&amp;quot;W&amp;quot;, W_L) ~ 1, grepl(&amp;quot;L&amp;quot;, W_L) ~ 0)) #Seton Hall stats
#Filtering for Seton Hall and creating win/loss columns seton_hall &amp;lt;- logs %&amp;gt;% filter(TeamFull == &amp;#39;Seton Hall Pirates&amp;#39;) %&amp;gt;% mutate(outcome = case_when( grepl(&amp;quot;W&amp;quot;, W_L) ~ 1, grepl(&amp;quot;L&amp;quot;, W_L) ~ 0)) #Dataframe for SH wins and losses seton_hall %&amp;gt;% group_by(Season, outcome) %&amp;gt;% summarise(count = n()) ## # A tibble: 22 × 3 ## # Groups: Season [11] ## Season outcome count ## &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; ## 1 2011-2012 0 13 ## 2 2011-2012 1 21 ## 3 2012-2013 0 18 ## 4 2012-2013 1 15 ## 5 2013-2014 0 17 ## 6 2013-2014 1 17 ## 7 2014-2015 0 15 ## 8 2014-2015 1 16 ## 9 2015-2016 0 9 ## 10 2015-2016 1 25 ## # … with 12 more rows #Dataframe for SH scoring average seton_hall_scoring_avg &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total_score = sum(TeamScore), games = max(Game), average = total_score/games, opp_total_score = sum(OpponentScore), games = max(Game), opp_average = opp_total_score/games) #Dataframe for SH total 3PA seton_hall_total_3PA &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total = sum(Team3PA), games = max(Game), average = total/games, opp_total = sum(Opponent3PA), games = max(Game), opp_average = opp_total/games) #Dataframe for SH total 3pt pct seton_hall_total_3PPCT &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total = sum(Team3PPCT), games = max(Game), average = total/games, opp_total = sum(Opponent3PPCT), games = max(Game), opp_average = opp_total/games) #Dataframe for SH total FTA seton_hall_total_FTA &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total = sum(TeamFTA), games = max(Game), average = total/games, opp_total = sum(OpponentFTA), games = max(Game), opp_average = opp_total/games) #Dataframe for SH rebounds seton_hall_rebounds &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total = sum(TeamTotalRebounds), games = max(Game), average = total/games, opp_total = sum(OpponentTotalRebounds), games = max(Game), opp_average = opp_total/games) #Dataframe for SH turnovers seton_hall_turnovers &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total = sum(TeamTurnovers), games = max(Game), average = total/games, opp_total = sum(OpponentTurnovers), games = max(Game), opp_average = opp_total/games) #Dataframe for SH fouls seton_hall_fouls &amp;lt;- seton_hall %&amp;gt;% group_by(Season) %&amp;gt;% summarise(total = sum(TeamPersonalFouls), games = max(Game), average = total/games, opp_total = sum(OpponentPersonalFouls), games = max(Game), opp_average = opp_total/games) #Maryland stats</description>
    </item>
    
    <item>
      <title>Are College Teams Passing More on First Down?</title>
      <link>https://iadecker.github.io/2022/11/10/are-college-teams-passing-more-on-first-down/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/11/10/are-college-teams-passing-more-on-first-down/</guid>
      <description>#loading libraries and data library(tidyverse) library(cfbfastR) #loading pbp data since 2014 tictoc::tic() pbp &amp;lt;- data.frame() seasons &amp;lt;- 2014:cfbfastR:::most_recent_cfb_season() progressr::with_progress({ pbp &amp;lt;- cfbfastR::load_cfb_pbp(seasons) }) tictoc::toc() ## 180.017 sec elapsed #looking at our pbp data glimpse(pbp) ## Rows: 1,398,307 ## Columns: 331 ## $ year &amp;lt;dbl&amp;gt; 2014, 2014, 2014, 2014, 2014, 2014, 2… ## $ week &amp;lt;int&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ id_play &amp;lt;dbl&amp;gt; 4.</description>
    </item>
    
    <item>
      <title>NFL Redzone EPA Reverse Engineering</title>
      <link>https://iadecker.github.io/2022/11/01/nfl-redzone-epa-reverse-engineering/</link>
      <pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/11/01/nfl-redzone-epa-reverse-engineering/</guid>
      <description>library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(nflreadr) library(ggalt) ## Registered S3 methods overwritten by &amp;#39;ggalt&amp;#39;: ## method from ## grid.draw.absoluteGrob ggplot2 ## grobHeight.</description>
    </item>
    
    <item>
      <title>Volleyball Aces</title>
      <link>https://iadecker.github.io/2022/10/27/volleyball-aces/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/10/27/volleyball-aces/</guid>
      <description>#Loading our libraries library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(ggbeeswarm) library(ggrepel) #Setting up the seed for the random number generator. set.seed(1234) #Loading our player data players &amp;lt;- read.</description>
    </item>
    
    <item>
      <title>Maryland Football YPP</title>
      <link>https://iadecker.github.io/2022/10/25/blog-post-maryland-football-ypp/</link>
      <pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/10/25/blog-post-maryland-football-ypp/</guid>
      <description>#Loading libraries library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(ggrepel) #Loading data logs &amp;lt;- read_csv(&amp;quot;https://dwillis.github.io/sports-data-files/footballlogs1122.csv&amp;quot;) ## Rows: 18050 Columns: 57 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &amp;quot;,&amp;quot; ## chr (9): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con.</description>
    </item>
    
    <item>
      <title>CFB Recruiting Ratings &amp; Wins</title>
      <link>https://iadecker.github.io/2022/10/20/cfb-recruiting-ratings-wins/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/10/20/cfb-recruiting-ratings-wins/</guid>
      <description>#Loading our library library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() #Let’s dig into the relationship between college football recruiting rankings and wins using data from 2015-2021.</description>
    </item>
    
    <item>
      <title>First Pass Interceptions</title>
      <link>https://iadecker.github.io/2022/10/18/first-pass-interceptions/</link>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/10/18/first-pass-interceptions/</guid>
      <description>library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(cfbfastR) tictoc::tic() pbp &amp;lt;- data.frame() seasons &amp;lt;- 2014:cfbfastR:::most_recent_cfb_season() progressr::with_progress({ pbp &amp;lt;- cfbfastR::load_cfb_pbp(seasons) }) tictoc::toc() ## 86.093 sec elapsed glimpse(pbp) ## Rows: 1,346,971 ## Columns: 331 ## $ year &amp;lt;dbl&amp;gt; 2014, 2014, 2014, 2014, 2014, 2014, 2… ## $ week &amp;lt;int&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ id_play &amp;lt;dbl&amp;gt; 4.</description>
    </item>
    
    <item>
      <title>How Does Maryland Score Its Points?</title>
      <link>https://iadecker.github.io/2022/10/13/how-does-maryland-score-its-points/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/10/13/how-does-maryland-score-its-points/</guid>
      <description>#Loading our packages
library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(waffle) #Loading the 2022 match data
match_data &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2022.csv&amp;quot;) ## Rows: 6077 Columns: 36 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &amp;quot;,&amp;quot; ## chr (3): team, opponent, home_away ## dbl (31): team_score, opponent_score, s, kills, errors, total_attacks, hit_.</description>
    </item>
    
    <item>
      <title>Big Ten Average Offensive Plays</title>
      <link>https://iadecker.github.io/2022/10/11/big-ten-average-offensive-plays/</link>
      <pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://iadecker.github.io/2022/10/11/big-ten-average-offensive-plays/</guid>
      <description>library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ── ## ✔ ggplot2 3.3.6 ✔ purrr 0.3.4 ## ✔ tibble 3.1.8 ✔ dplyr 1.0.9 ## ✔ tidyr 1.2.0 ✔ stringr 1.4.1 ## ✔ readr 2.1.2 ✔ forcats 0.5.2 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() #In this next code block, I will load the pbp data for college football into a dataframe called ‘logs.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://iadecker.github.io/2020/12/01/hello-r-markdown/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      
      <guid>https://iadecker.github.io/2020/12/01/hello-r-markdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>https://iadecker.github.io/2016/12/30/a-plain-markdown-post/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>https://iadecker.github.io/2016/12/30/a-plain-markdown-post/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc. There are many differences in syntax between Blackfriday&amp;rsquo;s Markdown and Pandoc&amp;rsquo;s Markdown.</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>https://iadecker.github.io/2015/01/01/lorem-ipsum/</link>
      <pubDate>Thu, 01 Jan 2015 13:09:13 -0600</pubDate>
      
      <guid>https://iadecker.github.io/2015/01/01/lorem-ipsum/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
  </channel>
</rss>
